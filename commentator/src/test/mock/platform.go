// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/zawa-t/pr-commentator/commentator/src/platform"
	"sync"
)

// Ensure, that ReviewMock does implement platform.Review.
// If this is not the case, regenerate this file with moq.
var _ platform.Review = &ReviewMock{}

// ReviewMock is a mock implementation of platform.Review.
//
//	func TestSomethingThatUsesReview(t *testing.T) {
//
//		// make and configure a mocked platform.Review
//		mockedReview := &ReviewMock{
//			AddCommentsFunc: func(ctx context.Context, data platform.Data) error {
//				panic("mock out the AddComments method")
//			},
//		}
//
//		// use mockedReview in code that requires platform.Review
//		// and then make assertions.
//
//	}
type ReviewMock struct {
	// AddCommentsFunc mocks the AddComments method.
	AddCommentsFunc func(ctx context.Context, data platform.Data) error

	// calls tracks calls to the methods.
	calls struct {
		// AddComments holds details about calls to the AddComments method.
		AddComments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data platform.Data
		}
	}
	lockAddComments sync.RWMutex
}

// AddComments calls AddCommentsFunc.
func (mock *ReviewMock) AddComments(ctx context.Context, data platform.Data) error {
	if mock.AddCommentsFunc == nil {
		panic("ReviewMock.AddCommentsFunc: method is nil but Review.AddComments was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data platform.Data
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockAddComments.Lock()
	mock.calls.AddComments = append(mock.calls.AddComments, callInfo)
	mock.lockAddComments.Unlock()
	return mock.AddCommentsFunc(ctx, data)
}

// AddCommentsCalls gets all the calls that were made to AddComments.
// Check the length with:
//
//	len(mockedReview.AddCommentsCalls())
func (mock *ReviewMock) AddCommentsCalls() []struct {
	Ctx  context.Context
	Data platform.Data
} {
	var calls []struct {
		Ctx  context.Context
		Data platform.Data
	}
	mock.lockAddComments.RLock()
	calls = mock.calls.AddComments
	mock.lockAddComments.RUnlock()
	return calls
}
