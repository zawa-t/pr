// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/zawa-t/pr/commentator/src/review"
	"sync"
)

// Ensure, that ReviewerMock does implement review.Reviewer.
// If this is not the case, regenerate this file with moq.
var _ review.Reviewer = &ReviewerMock{}

// ReviewerMock is a mock implementation of review.Reviewer.
//
//	func TestSomethingThatUsesReviewer(t *testing.T) {
//
//		// make and configure a mocked review.Reviewer
//		mockedReviewer := &ReviewerMock{
//			ReviewFunc: func(ctx context.Context, data review.Data) error {
//				panic("mock out the Review method")
//			},
//		}
//
//		// use mockedReviewer in code that requires review.Reviewer
//		// and then make assertions.
//
//	}
type ReviewerMock struct {
	// ReviewFunc mocks the Review method.
	ReviewFunc func(ctx context.Context, data review.Data) error

	// calls tracks calls to the methods.
	calls struct {
		// Review holds details about calls to the Review method.
		Review []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data review.Data
		}
	}
	lockReview sync.RWMutex
}

// Review calls ReviewFunc.
func (mock *ReviewerMock) Review(ctx context.Context, data review.Data) error {
	if mock.ReviewFunc == nil {
		panic("ReviewerMock.ReviewFunc: method is nil but Reviewer.Review was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data review.Data
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockReview.Lock()
	mock.calls.Review = append(mock.calls.Review, callInfo)
	mock.lockReview.Unlock()
	return mock.ReviewFunc(ctx, data)
}

// ReviewCalls gets all the calls that were made to Review.
// Check the length with:
//
//	len(mockedReviewer.ReviewCalls())
func (mock *ReviewerMock) ReviewCalls() []struct {
	Ctx  context.Context
	Data review.Data
} {
	var calls []struct {
		Ctx  context.Context
		Data review.Data
	}
	mock.lockReview.RLock()
	calls = mock.calls.Review
	mock.lockReview.RUnlock()
	return calls
}
