// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/zawa-t/pr-commentator/platform/bitbucket"
	"sync"
)

// Ensure, that ReviewMock does implement bitbucket.Review.
// If this is not the case, regenerate this file with moq.
var _ bitbucket.Review = &ReviewMock{}

// ReviewMock is a mock implementation of bitbucket.Review.
//
//	func TestSomethingThatUsesReview(t *testing.T) {
//
//		// make and configure a mocked bitbucket.Review
//		mockedReview := &ReviewMock{
//			BulkUpsertAnnotationsFunc: func(ctx context.Context, datas []bitbucket.AnnotationData, reportID string) error {
//				panic("mock out the BulkUpsertAnnotations method")
//			},
//			DeleteReportFunc: func(ctx context.Context, reportID string) error {
//				panic("mock out the DeleteReport method")
//			},
//			GetReportFunc: func(ctx context.Context, reportID string) (*bitbucket.AnnotationResponse, error) {
//				panic("mock out the GetReport method")
//			},
//			PostCommentFunc: func(ctx context.Context, data bitbucket.CommentData) error {
//				panic("mock out the PostComment method")
//			},
//			UpsertReportFunc: func(ctx context.Context, reportID string, data bitbucket.ReportData) error {
//				panic("mock out the UpsertReport method")
//			},
//		}
//
//		// use mockedReview in code that requires bitbucket.Review
//		// and then make assertions.
//
//	}
type ReviewMock struct {
	// BulkUpsertAnnotationsFunc mocks the BulkUpsertAnnotations method.
	BulkUpsertAnnotationsFunc func(ctx context.Context, datas []bitbucket.AnnotationData, reportID string) error

	// DeleteReportFunc mocks the DeleteReport method.
	DeleteReportFunc func(ctx context.Context, reportID string) error

	// GetReportFunc mocks the GetReport method.
	GetReportFunc func(ctx context.Context, reportID string) (*bitbucket.AnnotationResponse, error)

	// PostCommentFunc mocks the PostComment method.
	PostCommentFunc func(ctx context.Context, data bitbucket.CommentData) error

	// UpsertReportFunc mocks the UpsertReport method.
	UpsertReportFunc func(ctx context.Context, reportID string, data bitbucket.ReportData) error

	// calls tracks calls to the methods.
	calls struct {
		// BulkUpsertAnnotations holds details about calls to the BulkUpsertAnnotations method.
		BulkUpsertAnnotations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Datas is the datas argument value.
			Datas []bitbucket.AnnotationData
			// ReportID is the reportID argument value.
			ReportID string
		}
		// DeleteReport holds details about calls to the DeleteReport method.
		DeleteReport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReportID is the reportID argument value.
			ReportID string
		}
		// GetReport holds details about calls to the GetReport method.
		GetReport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReportID is the reportID argument value.
			ReportID string
		}
		// PostComment holds details about calls to the PostComment method.
		PostComment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data bitbucket.CommentData
		}
		// UpsertReport holds details about calls to the UpsertReport method.
		UpsertReport []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReportID is the reportID argument value.
			ReportID string
			// Data is the data argument value.
			Data bitbucket.ReportData
		}
	}
	lockBulkUpsertAnnotations sync.RWMutex
	lockDeleteReport          sync.RWMutex
	lockGetReport             sync.RWMutex
	lockPostComment           sync.RWMutex
	lockUpsertReport          sync.RWMutex
}

// BulkUpsertAnnotations calls BulkUpsertAnnotationsFunc.
func (mock *ReviewMock) BulkUpsertAnnotations(ctx context.Context, datas []bitbucket.AnnotationData, reportID string) error {
	if mock.BulkUpsertAnnotationsFunc == nil {
		panic("ReviewMock.BulkUpsertAnnotationsFunc: method is nil but Review.BulkUpsertAnnotations was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Datas    []bitbucket.AnnotationData
		ReportID string
	}{
		Ctx:      ctx,
		Datas:    datas,
		ReportID: reportID,
	}
	mock.lockBulkUpsertAnnotations.Lock()
	mock.calls.BulkUpsertAnnotations = append(mock.calls.BulkUpsertAnnotations, callInfo)
	mock.lockBulkUpsertAnnotations.Unlock()
	return mock.BulkUpsertAnnotationsFunc(ctx, datas, reportID)
}

// BulkUpsertAnnotationsCalls gets all the calls that were made to BulkUpsertAnnotations.
// Check the length with:
//
//	len(mockedReview.BulkUpsertAnnotationsCalls())
func (mock *ReviewMock) BulkUpsertAnnotationsCalls() []struct {
	Ctx      context.Context
	Datas    []bitbucket.AnnotationData
	ReportID string
} {
	var calls []struct {
		Ctx      context.Context
		Datas    []bitbucket.AnnotationData
		ReportID string
	}
	mock.lockBulkUpsertAnnotations.RLock()
	calls = mock.calls.BulkUpsertAnnotations
	mock.lockBulkUpsertAnnotations.RUnlock()
	return calls
}

// DeleteReport calls DeleteReportFunc.
func (mock *ReviewMock) DeleteReport(ctx context.Context, reportID string) error {
	if mock.DeleteReportFunc == nil {
		panic("ReviewMock.DeleteReportFunc: method is nil but Review.DeleteReport was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ReportID string
	}{
		Ctx:      ctx,
		ReportID: reportID,
	}
	mock.lockDeleteReport.Lock()
	mock.calls.DeleteReport = append(mock.calls.DeleteReport, callInfo)
	mock.lockDeleteReport.Unlock()
	return mock.DeleteReportFunc(ctx, reportID)
}

// DeleteReportCalls gets all the calls that were made to DeleteReport.
// Check the length with:
//
//	len(mockedReview.DeleteReportCalls())
func (mock *ReviewMock) DeleteReportCalls() []struct {
	Ctx      context.Context
	ReportID string
} {
	var calls []struct {
		Ctx      context.Context
		ReportID string
	}
	mock.lockDeleteReport.RLock()
	calls = mock.calls.DeleteReport
	mock.lockDeleteReport.RUnlock()
	return calls
}

// GetReport calls GetReportFunc.
func (mock *ReviewMock) GetReport(ctx context.Context, reportID string) (*bitbucket.AnnotationResponse, error) {
	if mock.GetReportFunc == nil {
		panic("ReviewMock.GetReportFunc: method is nil but Review.GetReport was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ReportID string
	}{
		Ctx:      ctx,
		ReportID: reportID,
	}
	mock.lockGetReport.Lock()
	mock.calls.GetReport = append(mock.calls.GetReport, callInfo)
	mock.lockGetReport.Unlock()
	return mock.GetReportFunc(ctx, reportID)
}

// GetReportCalls gets all the calls that were made to GetReport.
// Check the length with:
//
//	len(mockedReview.GetReportCalls())
func (mock *ReviewMock) GetReportCalls() []struct {
	Ctx      context.Context
	ReportID string
} {
	var calls []struct {
		Ctx      context.Context
		ReportID string
	}
	mock.lockGetReport.RLock()
	calls = mock.calls.GetReport
	mock.lockGetReport.RUnlock()
	return calls
}

// PostComment calls PostCommentFunc.
func (mock *ReviewMock) PostComment(ctx context.Context, data bitbucket.CommentData) error {
	if mock.PostCommentFunc == nil {
		panic("ReviewMock.PostCommentFunc: method is nil but Review.PostComment was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data bitbucket.CommentData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockPostComment.Lock()
	mock.calls.PostComment = append(mock.calls.PostComment, callInfo)
	mock.lockPostComment.Unlock()
	return mock.PostCommentFunc(ctx, data)
}

// PostCommentCalls gets all the calls that were made to PostComment.
// Check the length with:
//
//	len(mockedReview.PostCommentCalls())
func (mock *ReviewMock) PostCommentCalls() []struct {
	Ctx  context.Context
	Data bitbucket.CommentData
} {
	var calls []struct {
		Ctx  context.Context
		Data bitbucket.CommentData
	}
	mock.lockPostComment.RLock()
	calls = mock.calls.PostComment
	mock.lockPostComment.RUnlock()
	return calls
}

// UpsertReport calls UpsertReportFunc.
func (mock *ReviewMock) UpsertReport(ctx context.Context, reportID string, data bitbucket.ReportData) error {
	if mock.UpsertReportFunc == nil {
		panic("ReviewMock.UpsertReportFunc: method is nil but Review.UpsertReport was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ReportID string
		Data     bitbucket.ReportData
	}{
		Ctx:      ctx,
		ReportID: reportID,
		Data:     data,
	}
	mock.lockUpsertReport.Lock()
	mock.calls.UpsertReport = append(mock.calls.UpsertReport, callInfo)
	mock.lockUpsertReport.Unlock()
	return mock.UpsertReportFunc(ctx, reportID, data)
}

// UpsertReportCalls gets all the calls that were made to UpsertReport.
// Check the length with:
//
//	len(mockedReview.UpsertReportCalls())
func (mock *ReviewMock) UpsertReportCalls() []struct {
	Ctx      context.Context
	ReportID string
	Data     bitbucket.ReportData
} {
	var calls []struct {
		Ctx      context.Context
		ReportID string
		Data     bitbucket.ReportData
	}
	mock.lockUpsertReport.RLock()
	calls = mock.calls.UpsertReport
	mock.lockUpsertReport.RUnlock()
	return calls
}
