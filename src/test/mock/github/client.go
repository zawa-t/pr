// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/zawa-t/pr/reporter/platform/github"
	"sync"
)

// Ensure, that ClientMock does implement github.Client.
// If this is not the case, regenerate this file with moq.
var _ github.Client = &ClientMock{}

// ClientMock is a mock implementation of github.Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked github.Client
//		mockedClient := &ClientMock{
//			CreateCheckRunFunc: func(ctx context.Context, data github.POSTCheckRuns) error {
//				panic("mock out the CreateCheckRun method")
//			},
//			CreateCommentFunc: func(ctx context.Context, data github.CommentData) error {
//				panic("mock out the CreateComment method")
//			},
//			CreateReviewFunc: func(ctx context.Context, data github.ReviewData) error {
//				panic("mock out the CreateReview method")
//			},
//			GetPRCommentsFunc: func(ctx context.Context) ([]github.GetPRCommentResponse, error) {
//				panic("mock out the GetPRComments method")
//			},
//		}
//
//		// use mockedClient in code that requires github.Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// CreateCheckRunFunc mocks the CreateCheckRun method.
	CreateCheckRunFunc func(ctx context.Context, data github.POSTCheckRuns) error

	// CreateCommentFunc mocks the CreateComment method.
	CreateCommentFunc func(ctx context.Context, data github.CommentData) error

	// CreateReviewFunc mocks the CreateReview method.
	CreateReviewFunc func(ctx context.Context, data github.ReviewData) error

	// GetPRCommentsFunc mocks the GetPRComments method.
	GetPRCommentsFunc func(ctx context.Context) ([]github.GetPRCommentResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCheckRun holds details about calls to the CreateCheckRun method.
		CreateCheckRun []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data github.POSTCheckRuns
		}
		// CreateComment holds details about calls to the CreateComment method.
		CreateComment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data github.CommentData
		}
		// CreateReview holds details about calls to the CreateReview method.
		CreateReview []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data github.ReviewData
		}
		// GetPRComments holds details about calls to the GetPRComments method.
		GetPRComments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCreateCheckRun sync.RWMutex
	lockCreateComment  sync.RWMutex
	lockCreateReview   sync.RWMutex
	lockGetPRComments  sync.RWMutex
}

// CreateCheckRun calls CreateCheckRunFunc.
func (mock *ClientMock) CreateCheckRun(ctx context.Context, data github.POSTCheckRuns) error {
	if mock.CreateCheckRunFunc == nil {
		panic("ClientMock.CreateCheckRunFunc: method is nil but Client.CreateCheckRun was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data github.POSTCheckRuns
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockCreateCheckRun.Lock()
	mock.calls.CreateCheckRun = append(mock.calls.CreateCheckRun, callInfo)
	mock.lockCreateCheckRun.Unlock()
	return mock.CreateCheckRunFunc(ctx, data)
}

// CreateCheckRunCalls gets all the calls that were made to CreateCheckRun.
// Check the length with:
//
//	len(mockedClient.CreateCheckRunCalls())
func (mock *ClientMock) CreateCheckRunCalls() []struct {
	Ctx  context.Context
	Data github.POSTCheckRuns
} {
	var calls []struct {
		Ctx  context.Context
		Data github.POSTCheckRuns
	}
	mock.lockCreateCheckRun.RLock()
	calls = mock.calls.CreateCheckRun
	mock.lockCreateCheckRun.RUnlock()
	return calls
}

// CreateComment calls CreateCommentFunc.
func (mock *ClientMock) CreateComment(ctx context.Context, data github.CommentData) error {
	if mock.CreateCommentFunc == nil {
		panic("ClientMock.CreateCommentFunc: method is nil but Client.CreateComment was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data github.CommentData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockCreateComment.Lock()
	mock.calls.CreateComment = append(mock.calls.CreateComment, callInfo)
	mock.lockCreateComment.Unlock()
	return mock.CreateCommentFunc(ctx, data)
}

// CreateCommentCalls gets all the calls that were made to CreateComment.
// Check the length with:
//
//	len(mockedClient.CreateCommentCalls())
func (mock *ClientMock) CreateCommentCalls() []struct {
	Ctx  context.Context
	Data github.CommentData
} {
	var calls []struct {
		Ctx  context.Context
		Data github.CommentData
	}
	mock.lockCreateComment.RLock()
	calls = mock.calls.CreateComment
	mock.lockCreateComment.RUnlock()
	return calls
}

// CreateReview calls CreateReviewFunc.
func (mock *ClientMock) CreateReview(ctx context.Context, data github.ReviewData) error {
	if mock.CreateReviewFunc == nil {
		panic("ClientMock.CreateReviewFunc: method is nil but Client.CreateReview was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Data github.ReviewData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockCreateReview.Lock()
	mock.calls.CreateReview = append(mock.calls.CreateReview, callInfo)
	mock.lockCreateReview.Unlock()
	return mock.CreateReviewFunc(ctx, data)
}

// CreateReviewCalls gets all the calls that were made to CreateReview.
// Check the length with:
//
//	len(mockedClient.CreateReviewCalls())
func (mock *ClientMock) CreateReviewCalls() []struct {
	Ctx  context.Context
	Data github.ReviewData
} {
	var calls []struct {
		Ctx  context.Context
		Data github.ReviewData
	}
	mock.lockCreateReview.RLock()
	calls = mock.calls.CreateReview
	mock.lockCreateReview.RUnlock()
	return calls
}

// GetPRComments calls GetPRCommentsFunc.
func (mock *ClientMock) GetPRComments(ctx context.Context) ([]github.GetPRCommentResponse, error) {
	if mock.GetPRCommentsFunc == nil {
		panic("ClientMock.GetPRCommentsFunc: method is nil but Client.GetPRComments was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetPRComments.Lock()
	mock.calls.GetPRComments = append(mock.calls.GetPRComments, callInfo)
	mock.lockGetPRComments.Unlock()
	return mock.GetPRCommentsFunc(ctx)
}

// GetPRCommentsCalls gets all the calls that were made to GetPRComments.
// Check the length with:
//
//	len(mockedClient.GetPRCommentsCalls())
func (mock *ClientMock) GetPRCommentsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetPRComments.RLock()
	calls = mock.calls.GetPRComments
	mock.lockGetPRComments.RUnlock()
	return calls
}
